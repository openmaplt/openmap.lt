"use client";

import type { MapLayerMouseEvent } from "maplibre-gl";
import { useEffect, useRef, useState } from "react";
import type { MapRef } from "react-map-gl/maplibre";
import { Popup } from "react-map-gl/maplibre";
import { generatePoiHtml, getObjectId, parseObjectId } from "@/libs/poiUtils";

interface PoiInteractionProps {
  mapRef: React.RefObject<MapRef>;
  onObjectIdChange: (objectId: string | undefined) => void;
  currentObjectId?: string;
}

interface PointGeometry {
  type: "Point";
  coordinates: [number, number];
}

const INTERACTIVE_LAYER = "label-amenity";

export function PoiInteraction({
  mapRef,
  onObjectIdChange,
  currentObjectId,
}: PoiInteractionProps) {
  const [popupInfo, setPopupInfo] = useState<{
    longitude: number;
    latitude: number;
    html: string;
  } | null>(null);
  const hasProcessedInitialObjectId = useRef(false);

  // Handle click on POI
  useEffect(() => {
    const map = mapRef.current?.getMap();
    if (!map) return;

    const handleClick = (e: MapLayerMouseEvent) => {
      const feature = e.features?.[0];
      if (!feature) return;

      const coordinates = (
        feature.geometry as PointGeometry
      ).coordinates.slice();
      const properties = feature.properties;

      // Ensure popup appears on the copy of the feature closest to the center
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      // Generate HTML content
      const html = generatePoiHtml(properties, feature.layer.id);

      // Set popup
      setPopupInfo({
        longitude: coordinates[0],
        latitude: coordinates[1],
        html,
      });

      // Update URL with object ID
      const objectId = getObjectId(properties, feature.layer.id);
      if (objectId) {
        onObjectIdChange(objectId);
      }
    };

    const handleMouseEnter = () => {
      map.getCanvas().style.cursor = "pointer";
    };

    const handleMouseLeave = () => {
      map.getCanvas().style.cursor = "";
    };

    // Wait for layer to be available
    if (map.getLayer(INTERACTIVE_LAYER)) {
      map.on("click", INTERACTIVE_LAYER, handleClick);
      map.on("mouseenter", INTERACTIVE_LAYER, handleMouseEnter);
      map.on("mouseleave", INTERACTIVE_LAYER, handleMouseLeave);
    }

    return () => {
      if (map.getLayer(INTERACTIVE_LAYER)) {
        map.off("click", INTERACTIVE_LAYER, handleClick);
        map.off("mouseenter", INTERACTIVE_LAYER, handleMouseEnter);
        map.off("mouseleave", INTERACTIVE_LAYER, handleMouseLeave);
      }
    };
  }, [mapRef, onObjectIdChange]);

  // Handle popup close
  const handlePopupClose = () => {
    setPopupInfo(null);
    onObjectIdChange(undefined);
  };

  // Handle initial object ID from URL
  useEffect(() => {
    if (
      !currentObjectId ||
      hasProcessedInitialObjectId.current ||
      !mapRef.current
    ) {
      return;
    }

    const map = mapRef.current.getMap();
    if (!map || !map.isStyleLoaded()) {
      return;
    }

    const parsedId = parseObjectId(currentObjectId);
    if (!parsedId) {
      return;
    }

    const { layerId, featureId } = parsedId;

    // Wait a bit for layers to be ready
    const timer = setTimeout(() => {
      if (!map.getLayer(layerId)) {
        return;
      }

      const features = map.queryRenderedFeatures({
        layers: [layerId],
        filter: ["==", "id", featureId],
      });

      if (features.length > 0) {
        const feature = features[0];
        const coordinates = (
          feature.geometry as PointGeometry
        ).coordinates.slice();
        const properties = feature.properties;

        const html = generatePoiHtml(properties, feature.layer.id);

        setPopupInfo({
          longitude: coordinates[0],
          latitude: coordinates[1],
          html,
        });

        hasProcessedInitialObjectId.current = true;
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [currentObjectId, mapRef]);

  return popupInfo ? (
    <Popup
      longitude={popupInfo.longitude}
      latitude={popupInfo.latitude}
      onClose={handlePopupClose}
      closeButton={true}
      closeOnClick={false}
      maxWidth="70vw"
      className="poi-popup"
    >
      {/* biome-ignore lint/security/noDangerouslySetInnerHtml: HTML is generated by our trusted POI formatting functions */}
      <div dangerouslySetInnerHTML={{ __html: popupInfo.html }} />
    </Popup>
  ) : null;
}
